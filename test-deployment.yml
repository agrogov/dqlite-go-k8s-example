apiVersion: v1
kind: Namespace
metadata:
  labels:
    io.portainer.kubernetes.application.name: test-app
    io.portainer.kubernetes.application.owner: admin
    kubernetes.io/metadata.name: go-k8s-test-app
  name: go-k8s-test-app
spec:
  finalizers:
    - kubernetes

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: test-app
  namespace: go-k8s-test-app
spec:
  serviceName: test-app-headless-svc
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      hostname: test-app-0
      serviceAccountName: go-k8s-test-app-sa
      terminationGracePeriodSeconds: 10
      containers:
      - name: go-k8s-test-app
        image: localhost:32000/go-k8s-test-app:registry
        imagePullPolicy: Always
        ports:
        - containerPort: 9001
        volumeMounts:
        - name: test-app-data
          mountPath: /app/db
      volumes:
      - name: test-app-data
        persistentVolumeClaim:
          claimName: test-app-data-test-app-0
  volumeClaimTemplates:
  - metadata:
      name: test-app-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-k8s-test-app-sa
  namespace: go-k8s-test-app

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-reader
  namespace: go-k8s-test-app
rules:
- apiGroups: [""]
  resources: ["services", "pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-reader-binding
  namespace: go-k8s-test-app
subjects:
- kind: ServiceAccount
  name: go-k8s-test-app-sa
  namespace: go-k8s-test-app
roleRef:
  kind: Role
  name: service-reader
  apiGroup: rbac.authorization.k8s.io
